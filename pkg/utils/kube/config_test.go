package kube

import (
	"fmt"
	"io/ioutil"
	"path/filepath"

	. "github.com/onsi/ginkgo"
	. "github.com/solo-io/gloo/test/helpers"
)

var _ = Describe("KubeConfigUtils", func() {
	Describe("load kubeconfig", func() {
		Context("when kubeconfig path, master url, environment variable KUBECONFIG is not set", func() {
			Specify("an in cluster config should be returned", func() {
				// configPath, err := generateKubeConfig("")
				// Must(err)
				// config, err := GetConfig("https://9.9.9.9", configPath)
				config, err := GetConfig("https://9.9.9.9", "")
				// Must(err)
				// config, err := clientcmd.BuildConfigFromFlags("https://9.9.9.9", "")
				Must(err)

				GinkgoWriter.Write([]byte(fmt.Sprintf("config: %+v\n", config)))
			})
		})
	})
	// petstoreUpstreamName := "petstore"
	// Context("creating a vService with a route to a function generated by"+
	// 	" gloo-function-discovery", func() {
	// 	getPath := "/api/pets"
	// 	functionPath := "/function"
	// 	functionPathWithParams := "/function-with-params"
	// 	vServiceName := "one-route"
	// 	BeforeEach(func() {
	// 		Must(err)
	// 	})
	// 	AfterEach(func() {
	// 		gloo.V1().Upstreams().Delete(petstoreUpstreamName)
	// 		gloo.V1().VirtualServices().Delete(vServiceName)
	// 	})
	// 	It("should route to the petstore function", func() {
	// 		CurlEventuallyShouldRespond(CurlOpts{
	// 			Path: functionPath,
	// 			Body: `{"id": 3, "tag": "donkey", "name": "videogamedunkey"}`,
	// 		}, "< HTTP/1.1 200", time.Second*30)
	// 		CurlEventuallyShouldRespond(CurlOpts{
	// 			Path: getPath + "/3",
	// 		}, "< HTTP/1.1 200", time.Second*5)
	// 		CurlEventuallyShouldRespond(CurlOpts{
	// 			Path: getPath + "/3",
	// 		}, `{"id":3,"name":"videogamedunkey"}`, time.Second*5)
	// 	})
	// 	It("using params: should route to the petstore function", func() {
	// 		CurlEventuallyShouldRespond(CurlOpts{
	// 			Path: functionPathWithParams,
	// 			Headers: map[string]string{
	// 				"x-id":   "4",
	// 				"x-name": "spatula",
	// 				"x-tag":  "dolphin",
	// 			},
	// 		}, "< HTTP/1.1 200", time.Second*45)
	// 		CurlEventuallyShouldRespond(CurlOpts{
	// 			Path: getPath + "/4",
	// 		}, "< HTTP/1.1 200", time.Second*45)
	// 		CurlEventuallyShouldRespond(CurlOpts{
	// 			Path: getPath + "/4",
	// 		}, `{"id":4,"name":"spatula"}`, time.Second*15)
	// 	})
	// })
})

func generateKubeConfig(host string) (string, error) {
	tempDir, err := ioutil.TempDir("/tmp/", ".kube")
	if err != nil {
		return "", err
	}
	path := filepath.Join(tempDir, "config")

	template := `apiVersion: v1
clusters:
- cluster:
    insecure-skip-tls-verify: true
    server: https://1.2.3.4
  name: development
contexts:
- context:
    cluster: development
    namespace: frontend
    user: developer
  name: dev-frontend
current-context: dev-frontend
kind: Config
preferences: {}
users:
- name: developer
  user:
    password: some-password
    username: exp`
	config := fmt.Sprintf(template, host)
	err = ioutil.WriteFile(path, []byte(config), 0644)
	if err != nil {
		return "", err
	}
	return path, nil
}
